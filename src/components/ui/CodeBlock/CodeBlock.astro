---
import './CodeBlock.css';

export interface Props {
  value: string;
}

const { value } = Astro.props;
---

<div class="code-block">
  <ul class="lines"></ul>
  <p>{value}</p>
</div>

<script>
  window.addEventListener('load', initSetLines());
  window.addEventListener('resize', initSetLines());

  function initSetLines(milliseconds = 200) {
    let timeout;
    return () => {
      if (timeout) clearTimeout(timeout);
      timeout = setTimeout(() => {
        // The first time it get the wrong div height
        setLines();
        setLines();
      }, milliseconds);
    };
  }

  function setLines() {
    const blocks = [...document.getElementsByClassName('code-block')];
    blocks.forEach((block) => {
      const [linesCounter] = block.getElementsByClassName('lines');
      const [p] = block.getElementsByTagName('p');
      const lines = countLines(p);

      linesCounter.innerHTML = '';

      Array.from({ length: lines }, (_, i) => ++i).forEach((line) => {
        const lineCounter = document.createElement('li');
        lineCounter.appendChild(document.createTextNode(formatNumber(line)));
        linesCounter.appendChild(lineCounter);
      });
    });
  }

  function countLines(el) {
    const elementStyle = window.getComputedStyle(el);
    const divHeight = el.offsetHeight;
    const lineHeight = parseInt(elementStyle.lineHeight);
    return divHeight / lineHeight;
  }

  function formatNumber(n) {
    return n.toLocaleString('en-US', {
      minimumIntegerDigits: 2,
      useGrouping: false,
    });
  }
</script>
